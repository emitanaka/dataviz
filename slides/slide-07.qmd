---
subtitle: "Data Visualisation with R"
pagetitle: "Multiple plots in one figure"
author: "Emi Tanaka"
date: "28th November 2022"
host: "Australasian Applied Statistics Conference 2022"
institute: "Monash University"
strip-comments: true
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: true
    theme: assets/monash.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    incremental: false
    auto-stretch: false
    css: [assets/custom.css, assets/pacman.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
---


## {#title-slide background-image="images/bg12.jpeg"}


```{r}
#| label: setup
#| include: false
library(tidyverse)
source("setup.R")
```

```{r}
#| child: title-slide.qmd
```


## Facets 

::: incremental

* Faceting in `ggplot2` refers to partitioning of the plot region to multiple panels each showing a different subset of the data.
* There are three types of faceting:

  * `facet_null()` (the default),
  * `facet_wrap()`, and
  * `facet_grid()`.
  
* We don't really use `facet_null()` much.

:::


## Illustrative data ðŸŒ± growth of soybean

```{r}
data(davidian.soybean, package = "agridat")
str(davidian.soybean)
```

::: f3

* The data contains:
  * `plot`: the plot code
  * `variety`: the code (`F` = commercial and `P` = experimental) for which soybean variety
  * `year`: the year it was grown (1988-1990)
  * `day` days after planting
  * `weight` weight of soybean leaves

:::



## `facet_wrap()`

* `facet_wrap()` divides the data into mutually exclusive subset based on the input variable and create subplots based on the data in the corresponding panel.

```{r facet-wrap-demo, fig.height = 2}
#| code-line-numbers: "|3"
ggplot(davidian.soybean, aes(day, weight)) + 
  geom_point() +
  facet_wrap(~year)
```


## Wrapping many panels

* `facet_wrap` "wraps" the panels into 2d if you have many panels

```{r facet-wrap-demo-wrap}
#| code-line-numbers: "|3"
#| fig-height: 4
ggplot(davidian.soybean, aes(day, weight)) + 
  geom_point() +
  facet_wrap(~plot)
```


## Wrapping by a continuous variable

* Discretize continuous variable using `cut()`, `cut_width()`, `cut_interval()` or `cut_number()`.

```{r facet-wrap-demo-cont, fig.height = 3}
#| code-line-numbers: "|3"
ggplot(davidian.soybean, aes(day, weight)) + 
  geom_point() +
  facet_wrap(~cut_number(day, 4))
```





## Changing the scales for each panel

* By default the scales are shared across the panels but you can choose to have scales built independently for each panel:

```{r facet-wrap-demo-cont-scales, fig.height = 3}
#| output-location: column
#| code-line-numbers: "|4-5"
#| fig-height: 2.5
#| fig-width: 4
ggplot(davidian.soybean, 
       aes(day, weight)) + 
  geom_point() +
  facet_wrap(~cut_number(day, 4), 
             scales = "free")
```

* If you want the scale to be independent only in one dimension then you can use `scales = "free_x"` and `scales = "free_y"`.



## Wrapping with more than one variables

* If you want to wrap the facet by more than one variable, you can combine the variables by using `+`:

```{r facet-wrap-demo-interaction, fig.height = 3}
#| code-line-numbers: "|4"
#| fig-height: 2.5
#| fig-width: 5
#| output-location: column
ggplot(davidian.soybean, 
       aes(day, weight)) + 
  geom_point() +
  facet_wrap(~ year + variety)
```

* Alternatively, you can use `vars()` instead of `+`.




## `facet_grid()`

* Alternatively, you can use `facet_grid()` to lay out the panels in a 2d grid:

```{r facet-grid-demo, fig.height = 3}
#| code-line-numbers: "|3"
ggplot(davidian.soybean, aes(day, weight)) + 
  geom_point() +
  facet_grid(variety ~ year)
```


## Missing facet variables

* If a layer data is missing the faceting variable(s), then the layer will be shown across all panels based on all of the layer data

```{r facet-all, fig.height = 2.5}
#| code-line-numbers: "|2"
#| fig-height: 2
ggplot(davidian.soybean, aes(day, weight)) + 
  geom_point(data = function(.data) select(.data, -c(variety, year)), color = "grey70") +
  geom_point() +
  facet_grid(variety ~ year)
```

* This is a nice way to creating a "shadow" across all panels.



## Combining plots with `patchwork`

* We use the `patchwork` package for combining plots.

. . . 

* Combining multiple `ggplot` objects is then just a matter of using `+` (side-by-side) or `/` (top-to-bottom).



## Demo with `patchwork`

```{r patchwork-demo, fig.height = 3}
#| code-line-numbers: "|2-3|5-6|8"
library(patchwork)
g1 <- ggplot(davidian.soybean, aes(day, weight)) +
  geom_point(aes(color = as.factor(year))) 

g2 <- ggplot(davidian.soybean, aes(as.factor(year), weight)) +
  geom_jitter(aes(color = as.factor(year))) 

g1 + g2
```


## Combining plot layouts

* `patchwork` can collect the same guides across the plots as well as automatically add tag labels

```{r patchwork-layouts}
#| code-line-numbers: "|2|3"
#| fig-height: 3
g1 + g2 + 
  plot_layout(guides = "collect") + 
  plot_annotation(tag_levels = "A")
```


## Plot layout

* You can combine the use of `+` and `/` to layout plots horizontally or vertically using `()` to group rows or columns

```{r patchwork-layout}
#| fig-height: 3.5
(g1 + g2) / (g2 + g1) + 
  plot_layout(guides = "collect")
```


## Flexible plot layout

* If you want even more control over the plot layout, then you can specify a string with the structure you want like below:

```{r patchwork-design}
#| output-location: column
#| fig-height: 4
#| fig-width: 5
design <- "
 11###
 11###
 #2222"

g1 + g2 + 
  plot_layout(guides = "collect",
              design = design)
```





# <i class="fas fa-users"></i> {background-color="#D93F00"}

[<i class="fas fa-code"></i> Time to code!]{.f-headline}


```{r}
#| echo: false
library(countdown)
countdown(15)
```

`>` Go to [emitanaka.org/dataviz-workshop/exercises/](https://emitanaka.org/dataviz-workshop/exercises/)   
`>` Click Exercise 6

