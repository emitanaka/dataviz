---
subtitle: "Data Visualisation with R"
pagetitle: "Barplots and position adjustments in ggplot2"
author: "Emi Tanaka"
date: "28th November 2022"
host: "Australasian Applied Statistics Conference 2022"
institute: "Monash University"
strip-comments: true
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: true
    theme: assets/monash.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    incremental: true
    auto-stretch: false
    css: [assets/custom.css, assets/pacman.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
---


## {#title-slide background-image="images/bg7.jpeg"}


```{r}
#| label: setup
#| include: false
library(tidyverse)
source("setup.R")
```

```{r}
#| child: title-slide.qmd
```


## Position adjustments

catalogue of barplots



## Illustrative data ðŸš¢ ship accidents

```{r}
data(Accident, package = "Ecdat")
str(Accident)
```

::: notes

* `type` is the ship type
* `constr` is year constructed
* `operate` is the year operated
* `months` is the service amount counted in months
* `acc` is the number of accidents.

:::

## A barplot with `geom_bar()` with categorical variables

```{r geom-bar}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_bar()
```

::: notes

* If you have a categorical variable, then you usually want to study the frequency of its categories. 
* Notice here that the `stat = "count"` is computing the frequencies for each category for you.  

:::


## A barplot with `geom_bar()` with discrete variables

```{r geom-bar2A}
ggplot(data = filter(CPSch3, year!=1994), 
       mapping = aes(x = year)) +
  geom_bar()
```

::: notes

* If you supply a numerical variable, you can see now that the x-axis scale is continuous. 
* The years are 2 years apart -- I filtered out 1994 on purpose so that it's easier to see the distance between bars are determined by the numerical value. 
* If you want to study each level in a discrete variable, then you may want to convert the discrete variable to a factor instead `x = factor(year)`. 

```{r geom-bar2B, echo = FALSE}
ggplot(data = filter(CPSch3, year!=1994), 
       mapping = aes(x = factor(year))) +
  geom_bar()
```

* When the variable is a factor or character, the distances between the bars are equal and the labels correspond to that particular level.

:::


## A barplot with `geom_col()` 

```{r geom-col, fig.width = 3, fig.height = 2}
dfsum <- CPSch3 %>% group_by(sex) %>% tally()
dfsum

ggplot(data = dfsum, 
       mapping = aes(x = sex, y = n)) +
  geom_col()
```

::: notes

* `tally()` is just a shorthand for `summarise(n = n())`. 
* Sometimes your input data may already contain pre-computed counts. 
* In this case, you don't need `stat = "count"` to do the counting for you. 
* You can use `geom_col()` instead.
* This is essential a short hand for `geom_bar(stat = "identity")` where `stat = "identity"` means that you will take the value as supplied without any statistical transformation.

:::


## Modifying the layer parameters

* Layers often have default parameter values.
* E.g. in the frequency polygon, the default is to have `bins = 30`.
* It's important to modify the parameters values appropriately
* More **details about the parameters of a layer is in the documentation** of the corresponding function, e.g. `?geom_freqpoly` to see the help file on the histogram layer.



## A stacked barplot with `geom_col()`

```{r geom-col-stack}
ggplot(Accident, aes(type, acc, fill = constr, group = operate)) +
  geom_col(color = "black", position = "stack")
```

::: notes

* Recall that `geom_col()` is the same as `geom_bar()` except `stat="identity"`, i.e. your input data should already be summarised as count data. 
* By default the values in `y` are stacked on top of another.
* The aesthetic `group` here breaks the count in two groups and stack one on top of the other (try running the code without `group = operate`).

:::


## A grouped barplot with `geom_col()`

```{r geom-col-dodge}
ggplot(Accident, aes(type, acc, fill = constr)) +
  geom_col(color = "black", position = "dodge")
```

::: notes

* Notice here we removed the `group = operate` -- this results in stacked bars for the same `type` and `fill`.
* Here the `x` values are recalculated so that the factor levels within the same group (as determined by `x`) can fit.

:::


## Another grouped barplot with `geom_col()`

```{r geom-col-dodge2}
ggplot(Accident, aes(type, acc, fill = constr, group = operate)) +
  geom_col(color = "black", position = "dodge2")
```

::: notes

* Can you see what changed?
* `position = "dodge"` doesn't deal well when there is `fill` and `group` together but you can use `position = "dodge2"` that recalculates the `x` values in another way.

:::


## Stacked percentage barplot with `geom_col()`

```{r geom-col-fill}
ggplot(Accident, aes(type, acc, fill = constr, group = operate)) +
  geom_col(color = "black", position = "fill")
```

::: notes

* If you want to compare the percentages between the different `x`, then `position = "fill"` can be handy.

:::
