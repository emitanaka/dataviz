---
subtitle: "Data Visualisation with R"
pagetitle: "Customise the look with themes in ggplot2"
author: "Emi Tanaka"
date: "28th November 2022"
host: "Australasian Applied Statistics Conference 2022"
institute: "Monash University"
strip-comments: true
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: true
    theme: assets/monash.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    incremental: false
    auto-stretch: false
    css: [assets/custom.css, assets/pacman.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
---



## {#title-slide background-image="images/bg-final.jpeg"}



```{r}
#| label: setup
#| include: false
library(tidyverse)
source("setup.R")
```

```{r}
#| child: title-slide.qmd
```


## Customising plots with `theme`

::: incremental 

* You can customise almost any aspect of the `ggplot` object.
* The customisation follows a certain consistent rule which makes it cognitively easier to remember how to customise the plot. 

:::


## `theme`: modify the *look* of texts


<center>

<img src="images/ggplot-theme-text-annotation.png" width = "80%">


`element_text()`

</center>




## `element_text()`

* Modify any text in the plot as you like it!

::: flex

::: w-60


```{r ele-text}
#| eval: false
#| code-line-numbers: "|4|5-10|11-14|15-19"
ggplot(diamonds, aes(carat, price)) +
  geom_hex() +
  labs(title = "Diamond") +
  theme(
    axis.title.x = element_text(
      size = 30,
      face = "bold",
      angle = 10,
      family = "Fira Code"
    ),
    legend.title = element_text(
      color = "#ef42eb",
      margin = margin(b = 5)
    ),
    plot.title = element_text(
      size = 35,
      family = "Nunito",
      color = "blue"
    )
  )
```


:::

::: w-40


```{r ele-text}
#| echo: false
#| fig-width: 3
#| fig-height: 4
```


:::

:::




## `theme`: modify the *look* of the lines

<center>
<img src="images/ggplot-annotated-line-marks.png" width="70%">

`element_line()`
</center>


## `element_line()`

* If there's a line in the plot that's not data related, then it's generally controlled in the `theme` with `element_line()`. 

::: flex

::: w-70


```{r ele-line}
#| eval: false
#| code-line-numbers: "|5-9|10-14|15|16|17-18|19-23"
ggplot(diamonds, aes(carat, price)) +
  geom_hex() +
  labs(title = "Diamond") +
  theme(
    axis.line.y = element_line(
      color = "black",
      size = 1.2,
      arrow = grid::arrow()
    ),
    axis.line.x = element_line(
      linetype = "dashed",
      color = "brown",
      size = 1.2
    ),
    axis.ticks = element_line(color = "red", size = 1.1),
    axis.ticks.length = unit(3, "mm"),
    panel.grid.major = element_line(color = "blue",
                                    size = 1.2),
    panel.grid.minor = element_line(
      color = "#0080ff",
      size = 1.2,
      linetype = "dotted"
    )
  )
```



:::

::: w-30



```{r ele-line}
#| echo: false
#| fig-width: 4
#| fig-height: 5
```


:::

:::









## `theme`: modify the *look* of the <br>rectangular regions

<center>
<img src="images/ggplot-annotated-rect-marks.png" width = "40%">


`element_rect()`

</center>


## `element_rect()`

::: flex

::: w-70


```{r ele-rect}
#| eval: false
#| code-line-numbers: "|5-9|10|11-13|14-19|20-22|23"
ggplot(diamonds, aes(carat, price)) +
  geom_hex() +
  labs(title = "Diamond") +
  theme(
    legend.background = element_rect(
      fill = "#fff6c2",
      color = "black",
      linetype = "dashed"
    ),
    legend.key = element_rect(fill = "grey", color = "brown"),
    panel.background = element_rect(fill = "#005F59",
                                    color = "red", 
                                    size = 3),
    panel.border = element_rect(
      color = "black",
      fill = "transparent",
      linetype = "dashed",
      size = 3
    ),
    plot.background = element_rect(fill = "#a1dce9",
                                   color = "black",
                                   size = 1.3),
    legend.position = "bottom"
  )
```

:::

::: w-30



```{r ele-rect}
#| echo: false
#| fig-width: 4.5
#| fig-height: 5.5
```


:::

:::

[The selected colors don't make it a pretty plot but it's easier to distinguish between the different rectangular elements.]{.f3}



## Professional-looking plots

::: incremental

* You can make very pretty plots using `ggplot`.
* Using code to draw plots has an advantage over making plots and editing the plot manually, e.g. using Adobe Illustrator -- your plots are easily reproducible!
* Imagine that after you manually edit a plot, the data was updated -- you'll have to redo your manual task from scratch again!

:::


# <i class="fas fa-users"></i> {background-color="#D93F00"}


[<i class="fas fa-certificate"></i> Let's make some polished plots!]{.f-subheadline}


```{r}
#| echo: false
#| cache: false
library(countdown)
countdown(45)
```


`>` Go to [emitanaka.org/dataviz-workshop/exercises/](https://emitanaka.org/dataviz-workshop/exercises/)   
`>` Click Exercise 7  
`>` This is the _last_ practice session -- feel free to ask questions!

