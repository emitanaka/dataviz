---
subtitle: "Data Visualisation with R"
pagetitle: "Customise the look with themes in ggplot2"
author: "Emi Tanaka"
date: "28th November 2022"
host: "Australasian Applied Statistics Conference 2022"
institute: "Monash University"
strip-comments: true
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: true
    theme: assets/monash.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    incremental: true
    auto-stretch: false
    css: [assets/custom.css, assets/pacman.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
---


## {#title-slide background-image="images/bg13.jpeg"}


```{r}
#| label: setup
#| include: false
library(tidyverse)
source("setup.R")
```

```{r}
#| child: title-slide.qmd
```


## `theme`: modify the *look* of texts


<center>

<img src="images/ggplot-theme-text-annotation.png" width = "80%">


`element_text()`

</center>

::: notes

* You can customise almost any aspect of `ggplot` object.
* The customisation follows a certain consistent rule which makes it easier to remember how to customise the plot. 

:::

## `element_text()`

* There are many text elements in a plot -- modify any part of it how you like it!



```{r ele-text, eval = F}
ggplot(diamonds, aes(carat, price)) + 
  geom_hex() +
 labs(title = "Diamond") +
 theme(axis.title.x = element_text(size = 30,
                                 color = "red",
                                 face = "bold",
                                 angle = 10,
                                 family = "Fira Code"),
       legend.title = element_text(size = 25,
                                   color = "#ef42eb", 
                                   margin = margin(b = 5)),
       plot.title = element_text(size = 35,
                                 face = "bold",
                                 family = "Nunito",
                                 color = "blue"
                                ))
```

::: notes

```{r ele-text, echo = F, fig.width = 3.8, fig.height = 4.5}
```

:::

## `theme`: modify the *look* of the lines

<center>
<img src="images/ggplot-annotated-line-marks.png" width="70%">

`element_line()`
</center>


## `element_line()`



```{r ele-line, eval = F}
ggplot(diamonds, aes(carat, price)) + 
  geom_hex() +
 labs(title = "Diamond") +
 theme(axis.line.y = element_line(color = "black",
                                  size = 1.2,
                                  arrow = grid::arrow()),
       axis.line.x = element_line(linetype = "dashed", 
                                  color = "brown",
                                  size = 1.2),
       axis.ticks = element_line(color = "red", size = 1.1),
       axis.ticks.length = unit(3, "mm"),
       panel.grid.major = element_line(color = "blue", 
                                       size = 1.2),
       panel.grid.minor = element_line(color = "#0080ff",
                                       size = 1.2,
                                       linetype = "dotted"))
```


::: notes

```{r ele-line, echo = F, fig.width = 3.8, fig.height = 4.5}
```


* If there's a line in the plot that's not data related, then it's generally controlled in the `theme` with `element_line()`. 

:::

## `theme`: modify the *look* of the <br>rectangular regions

<center>
<img src="images/ggplot-annotated-rect-marks.png" width = "40%">


`element_rect()`

</center>


## `element_rect()`


```{r ele-rect, eval = F}
ggplot(diamonds, aes(carat, price)) + 
  geom_hex() +
 labs(title = "Diamond") +
 theme(
  legend.background = element_rect(fill = "#fff6c2", 
                                  color = "black",
                               linetype = "dashed"),
  legend.key = element_rect(fill = "grey", color = "brown"),
  panel.background = element_rect(fill = "#005F59",
                          color = "red", size = 3),
  panel.border = element_rect(color = "black", 
                              fill = "transparent",
                    linetype = "dashed", size = 3),
  plot.background = element_rect(fill = "#a1dce9",
                                color = "black",
                                 size = 1.3),
  legend.position = "bottom")
```


::: notes

```{r ele-rect, echo = F, fig.width = 3.8, fig.height = 4.5}
```

* The selected colors don't make it a pretty plot but it's easier to distinguish between the different rectangular elements

:::

## Professional-looking plots

* You can make very pretty plots using `ggplot`.
* Using code to draw plots has an advantage over making plots and editing the plot manually, e.g. using Adobe Illustrator -- your plots are easily reproducible!
* Imagine that after you manually edit a plot, the data was updated -- you'll have to redo your manual task from scratch again!

