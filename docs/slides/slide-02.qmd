---
subtitle: "Data Visualisation with R"
pagetitle: "Visualising univariate distribution with ggplot2"
author: "Emi Tanaka"
date: "28th November 2022"
host: "Australasian Applied Statistics Conference 2022"
institute: "Monash University"
strip-comments: true
format: 
  revealjs:
    logo: images/monash-one-line-black-rgb.png
    slide-number: true
    theme: assets/monash.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    incremental: true
    auto-stretch: false
    css: [assets/custom.css, assets/pacman.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
  cache: true
---


## {#title-slide background-image="images/bg4.jpeg"}

```{r}
#| label: setup
#| include: false
library(tidyverse)
source("setup.R")
```

```{r}
#| child: title-slide.qmd
```

## What is `ggplot2`?


* `ggplot2` is an R-package that was initially developed by Hadley Wickham as part of his PhD project.
* `ggplot2` implements an interpretation of the "The Grammar of Graphics" by Leland Wilkinson.
* It is one of the most popular packages in R for data visualisation and widely used in scientific outputs, reports, and even news articles.




## Installing and loading `ggplot2` 


* To use `ggplot2`, you first have to install the package 

```{r, eval = FALSE}
install.packages("ggplot2")
```

* Once you have installed it, you can load the package:

```{r}
library(ggplot2)
```
* `ggplot2` is part of the `tidyverse` family so if you load `tidyverse`, you don't need to load `ggplot2` like above

```{r}
library(tidyverse)
```

::: notes

* Currently `ggplot2` is maintained by Thomas Lin Pedersen along with authors: Hadley Wickham, Winston Chang, Lionel Henry, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani and Dewey Dunnington.
* `ggplot2` is an open-source tool so you can find all code for this at https://github.com/tidyverse/ggplot2
* There are over 250 contributors to the package. 

:::


## Basic structure of `ggplot`

![](images/ggplot-basic-str.png)

1. **data** as `data.frame`
2. a set of **aesthetic** mappings between variables in the data and visual properties
3. at least one **layer** which describes how to render each observation


## Data ðŸ’° Strawberry Yield

* Let's look at a survey of average hourly earnings in United States where each observation is an individual.

```{r}
data(nagai.strawberry.uniformity, package = "agridat")
str(nagai.strawberry.uniformity)
```

::: nonincremental

* This data contains: 
  * `row` = row index of the plot
  * `col` = column index of the plot
  * `yield` = the yield of the strawberry
  
:::

::: aside

Violeta Nagai (1978). Tamanho da parcela e numero de repeticoes em experimentos com morangueiro (Plot size and number of repetitions in experiments with strawberry). Bragantia, 37, 71-81. Table 2, page 75. https://dx.doi.org/10.1590/S0006-87051978000100009

:::


## Initialising the plot


```{r plot-initial}
ggplot(data = nagai.strawberry.uniformity) 
```

* When there is no layer, it produces a blank layer (`geom_blank()`) like the above plot.

::: notes

This graph isn't really useful. 

:::


## Mapping data variables to aesthetics

```{r plot-mapping}
ggplot(data = nagai.strawberry.uniformity,
       mapping = aes(x = row, y = yield)) 
```

* This gets the scale ready but no layer is defined so nothing is rendered in the panel.

::: notes

Notice that the scales are automatically setup based on the data -- less work for you to do in plotting the data. 

:::

## Layers

* Each layers have five main components:
   * `geom` - the geometric object to use display the data 
   * `stat` - statistical transformation to use on the data 
   * `data` - data to be displayed in this layer (usually inherited)
   * `mapping` - aesthetic mappings (usually inherited)
   * `position` - position adjustment
   
::: notes

* Most layer functions you use will start with `geom_`.

:::
   
## Distribution of a single variable

```{r}
#| echo: false
#| output: asis
fns <- dir(here::here("slides/images/catalogue/")) %>% 
  str_subset("^dist-")
cat(paste0("<img class='catalogue' src='images/catalogue/", fns, "'>", collapse = ""))
```

::: notes

* Distribution of a single _continuous_ variable can be studied with **histogram**, **density or frequency plot**, **boxplot**, **violin plot** or **dot plot**. 
* If you have a discrete or categorical variable, you may like to study this using a **barplot** (or sometimes called barchart). 
* We'll go through how to create these layers in `ggplot2` next. 

:::


## A histogram with `geom_histogram()`

```{r geom-histogram}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_histogram() +
  labs(x = "Yield (grams)")
```

::: notes

* By default `ggplot2` uses 30 bins (`bins = 30`) when drawing histograms. 
* It is often a good idea to try different number of bins (`bins`) or different bin widths (`binwidth`) to see how the **shape** of the histogram changes. 
* Here we can see that the distribution for the average hourly earnings are slightly right skewed.
* The mode average hourly earning looks like it's about US$14. 
* To find more about how to change parameters of the layer, have a look at the corresponding documentation (`?geom_histogram`).

:::


## Layer data

```{r geom-histogram-data}
g <- ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_histogram() 
layer_data(g, 1)
```

::: notes

* A histogram by default shows the **count** on the y-axis. 
* `ggplot2` calculates other useful statistics as well (seen using `layer_data`) and sometimes you want to use these instead. 

:::

## Accessing layer data

```{r geom-histogram-density}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_histogram(aes(y = after_stat(density))) 
```

::: notes

* In this plot, the y-axis is showing density instead of count. 
* This is signalled by using `y = after_stat(density)`. 
* This syntax is equivalent to `y = stat(density)` or `y = ..density..`, which was the old syntax to refer to computed statistics. 


:::

## A density plot with `geom_density()`

```{r geom-density}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_density() +
  labs(x = "Yield (grams)")
```

::: notes

* A density plot is like a histogram where it reveals the distribution of a (continuous) numerical variable. 
* The y-axis is showing the density, which is estimated using a particular kernel function. 
* The estimated density can oversmooth or have problems in the tails -- so don't only rely on density plots to tell you the full picture of the data. 

:::


## A frequency polygon with `geom_freqpoly()`

```{r geom-freqpoly}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_freqpoly() +
  labs(x = "Yield (grams)")
```

::: notes

* The default `geom_freqpoly` is showing the same statistic (`stat = "bin"`) as the default `geom_histogram` except one is using a bar (`geom = "bar"`) and the other is using a line (`geom = "path"`). 

:::




## A boxplot with `geom_boxplot()`

```{r geom-boxplot}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield)) +
  geom_boxplot() +
  labs(x = "Yield (grams)")
```

::: notes

* A boxplot depicts graphically the five number summary: minimum, first quartile, median, third quartile and maximum. 
* `geom_boxplot` is also useful in comparing distributions of multiple numerical variables, like below, where each variable corresponds to one boxplot. 

```{r boxplot-multiple, echo = FALSE}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = row, y = yield)) +
  geom_boxplot() +
  labs(x = "Yield (grams)")
```


:::


## A violin plot with `geom_violin()`

```{r geom-violin}
ggplot(data = nagai.strawberry.uniformity, 
       mapping = aes(x = yield, y = "")) +
  geom_violin() +
  labs(x = "Yield (grams)")
```

::: notes


* A dummy is required for `y` here!
* A violin plot depicts a density estimate of a continuous variable.

:::

## A dotplot with `geom_dotplot()`

```{r geom-dotplot}
ggplot(data = dplyr::sample_n(nagai.strawberry.uniformity, 200), 
       mapping = aes(x = yield)) +
  geom_dotplot() +
  labs(x = "Yield (grams)")
```

::: notes

* A dotplot works best for small number of observations so this plot is based on 200 random samples of the data.

:::



